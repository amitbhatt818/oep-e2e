---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
  
    ## Generating the testname for deployment
    - include_tasks: /ansible-utils/create_testname.yml

    ## RECORD START-OF-TEST IN LITMUS RESULT CR
    - include_tasks: /ansible-utils/update_litmus_result_resource.yml
      vars:
        status: 'SOT'
      
    ## Getting the username
    - name: Get username
      shell: cat /etc/secret-volume/username
      register: username

    ## Getting the password     
    - name: Get password
      shell: cat /etc/secret-volume/password
      register: password

    - block:

        ## Checking if openebs is already installed in the cluster
        - name: Check if openebs is already installed
          shell: kubectl get deploy --all-namespaces -l name=maya-apiserver --no-headers | awk '{print $1}' | wc -l
          args:
            executable: /bin/bash
          register: count_maya_api

        ## If openebs is installed in the cluster then get the namespace
        - name: Getting the namespace where openebs is installed 
          shell: kubectl get deploy --all-namespaces -l name=maya-apiserver --no-headers | awk '{print $1}'
          args:
            executable: /bin/bash
          register: openebs_namespace
          when: "count_maya_api.stdout == '1'"

        # Getting node details of the cluster
        ## Selecting the node which is in active state present in the cluster
        - name: Getting the node details of the cluster
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes?state=active&clusterId={{ cluster_id }}"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body:
              status_code: 202
          register: node_details

        ## Define variable node_id
        - set_fact:
            node_id: []
        
        ## Storing the node id of the nodes in the cluster
        - name: Storing the node id of node in the cluster
          set_fact:
            node_id: "{{ node_id  + [item.id] }}"
          loop: "{{ node_details.json.data }}"

        ## Removing the labels from the cluster nodes
        - include_tasks: /utils/openebs-label-cleanup.yml

        ## Removing application ns
        - include_tasks: /utils/app-cleanup.yml

        ## Deleting openebs from the cluster
        - include_tasks: /utils/openebs-cleanup.yml
          vars:
            namespace: "{{ openebs_namespace.stdout }}"
                  
          
        ## Fetch Project deatils
        - name: Fetch the project details
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/project"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            status_code: 200
          register: project_details

        ## Fetching project details
        - name: Fetching project details
          set_fact:
            project_id: "{{ project_details.json.data[0].id }}"

        ## Labeling the node-1 of connected Cluster with controlPlaneNode=true and dataPlaneNode=true
        - name: Giving POST request on labelnodes
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes/{{ node_id[0] }}/?action=labelnodes"
            method: POST
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body: '{"controlPlaneNode": true, "dataPlaneNode": true}'
            status_code: 202

        ## Labeling the node-2 of connected Cluster with controlPlaneNode=true and dataPlaneNode=flase
        - name: Giving POST request on labelnodes
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes/{{ node_id[1] }}/?action=labelnodes"
            method: POST
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body: '{"controlPlaneNode": true, "dataPlaneNode": false}'
            status_code: 202
        
        ## Get active openebses
        - name: Get active openebses
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses?state=active&clusterId={{ cluster_id}}"
            method: GET
            url_username: "{{ username.stdout }}" 
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            status_code: 200
          register: openebses_active

        ## Getting the openebses id
        - name: Getting the openebses id
          set_fact:
            openebs_id: "{{ openebses_active.json.data[0].id }}"

        - block:

          - name: Installing openebs on the cluster
            uri:
              url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses/{{ openebs_id }}?action=openebsinstall"
              method: POST
              url_username: "{{ username.stdout }}"
              url_password: "{{ password.stdout }}"
              force_basic_auth: yes
              return_content: yes
              body_format: json
              body: '{"yaml": {"apiVersion": "dao.mayadata.io/v1alpha1", "kind": "OpenEBS", "metadata": {"labels": {"name": "openebs-upgrade"}, "name": "install-openebs-1.7.0", "namespace": "openebs"}, "spec": {"admissionServer": {"affinity": null, "enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "analytics": {"enabled": true, "pingInterval": "24h"}, "apiServer": {"cstorSparsePool": {"enabled": false}, "enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "createDefaultStorageConfig": true, "cstorConfig": {"pool": {"imageTag": null}, "poolMgmt": {"imageTag": null}, "target": {"imageTag": null}, "volumeMgmt": {"imageTag": null}}, "defaultStoragePath": "/var/openebs", "helper": {"imageTag": null}, "imagePrefix": "quay.io/openebs", "imagePullPolicy": "IfNotPresent", "jivaConfig": {"imageTag": null, "replicas": 1}, "localProvisioner": {"enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "ndmDaemon": {"enabled": true, "filters": {"osDisk": {"enabled": null, "exclude": "/,/etc/hosts,/boot"}, "path": {"enabled": null, "exclude": "loop,/dev/fd0,/dev/sr0,/dev/ram,/dev/dm-,/dev/md", "include": null}, "vendor": {"enabled": null, "exclude": "CLOUDBYT,OpenEBS"}}, "imageTag": null, "nodeSelector": {"mayadata.io/data-plane": "true"}, "probes": {"seachest": {"enabled": false}, "smart": {"enabled": true}, "udev": {"enabled": true}}, "replicas": 1, "sparse": {"count": null, "path": null, "size": null}, "tolerations": [{"operator": "Exists"}]}, "ndmOperator": {"enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "options": null, "policies": {"monitoring": {"enabled": true, "imageTag": null}}, "provisioner": {"enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "resources": {"limits": {"cpu": "50m", "memory": "100Mi"}, "requests": {"cpu": null, "memory": null}}, "snapshotOperator": {"controller": {"imageTag": null}, "enabled": true, "nodeSelector": {"mayadata.io/control-plane": "true"}, "provisioner": {"imageTag": null}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "version": "1.7.0"}} }'
              status_code: 200
              headers:
                Content-Type: "application/json"
            register: openebs

          - name: Fetching Job Id to of openebsjob
            set_fact:
              openebs_job_id: "{{ openebs.json.id }}"
        
          - name: Fetch openebsjob details
            uri:
              url: "{{ director_url }}/v3/groups/{{ group_id}}/openebsjobs/{{ openebs_job_id }}"
              method: GET
              url_username: "{{ username.stdout }}"
              url_password: "{{ password.stdout }}"
              force_basic_auth: yes
              return_content: yes
              body_format: json
              status_code: 200
            register: openebs_job
            until: "openebs_job.json.state == 'Success'"
            delay: 10
            retries: 10
        
          when: openebses_active.json.data != []

        - block: 

          - name: Fetch openebses and create openebs
            uri:
              url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses"
              method: POST
              url_username: "{{ username.stdout }}"
              url_password: "{{ password.stdout }}"
              force_basic_auth: yes
              return_content: yes
              body_format: json
              body: '{ "clusterId": "{{ cluster_id }}","creatorId": "{{ group_id }}","projectId": "{{ project_id }}","templateId": "{{ template_id }}","namespace": "{{ namespace }}","defaultDirectory": "{{ default_directory }}","dockerRegistry": "{{ docker_registry }}","includeDeviceFilters": "{{ include_device_filters }}","excludeDeviceFilters": "{{ exclude_device_filters }}","cpuResourceLimit": "{{ cpu_resource_limit }}","memoryResourceLimit": " {{ memory_resource_limit }}","installationMode": "{{ installation_mode }}" }'
              status_code: 201
            register: install_openebs

          - name: Getting the openebses id
            set_fact:
              openebs_id: "{{ install_openebs.json.data[0].id }}"

          ## Installing openebs
          - name: Installing openebs on the cluster
            uri:
              url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses/{{ openebs_id }}/?action=openebsinstall"
              method: POST
              url_username: "{{ username.stdout }}"
              url_password: "{{ password.stdout }}"
              force_basic_auth: yes
              return_content: yes
              body_format: json
              body: '{"yaml": {"apiVersion": "dao.mayadata.io/v1alpha1", "kind": "OpenEBS", "metadata": {"labels": {"name": "openebs-upgrade"}, "name": "install-openebs-1.7.0", "namespace": "openebs"}, "spec": {"admissionServer": {"affinity": null, "enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "analytics": {"enabled": true, "pingInterval": "24h"}, "apiServer": {"cstorSparsePool": {"enabled": false}, "enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "createDefaultStorageConfig": true, "cstorConfig": {"pool": {"imageTag": null}, "poolMgmt": {"imageTag": null}, "target": {"imageTag": null}, "volumeMgmt": {"imageTag": null}}, "defaultStoragePath": "/var/openebs", "helper": {"imageTag": null}, "imagePrefix": "quay.io/openebs", "imagePullPolicy": "IfNotPresent", "jivaConfig": {"imageTag": null, "replicas": 1}, "localProvisioner": {"enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "ndmDaemon": {"enabled": true, "filters": {"osDisk": {"enabled": null, "exclude": "/,/etc/hosts,/boot"}, "path": {"enabled": null, "exclude": "loop,/dev/fd0,/dev/sr0,/dev/ram,/dev/dm-,/dev/md", "include": null}, "vendor": {"enabled": null, "exclude": "CLOUDBYT,OpenEBS"}}, "imageTag": null, "nodeSelector": {"mayadata.io/data-plane": "true"}, "probes": {"seachest": {"enabled": false}, "smart": {"enabled": true}, "udev": {"enabled": true}}, "replicas": 1, "sparse": {"count": null, "path": null, "size": null}, "tolerations": [{"operator": "Exists"}]}, "ndmOperator": {"enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "options": null, "policies": {"monitoring": {"enabled": true, "imageTag": null}}, "provisioner": {"enabled": true, "imageTag": null, "nodeSelector": {"mayadata.io/control-plane": "true"}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "resources": {"limits": {"cpu": "50m", "memory": "100Mi"}, "requests": {"cpu": null, "memory": null}}, "snapshotOperator": {"controller": {"imageTag": null}, "enabled": true, "nodeSelector": {"mayadata.io/control-plane": "true"}, "provisioner": {"imageTag": null}, "replicas": 1, "tolerations": [{"operator": "Exists"}]}, "version": "1.7.0"}} }'
              status_code: 200
            register: openebs

          ## Fetching job ID
          - name: Fetching Job Id to of openebsjob
            set_fact:
              openebs_job_id: "{{ openebs.json.id }}"

          - name: Fetch openebsjob details
            uri:
              url: "{{ director_url }}/v3/groups/{{ group_id}}/openebsjobs/{{ openebs_job_id }}"
              method: GET
              url_username: "{{ username.stdout }}"
              url_password: "{{ password.stdout }}"
              force_basic_auth: yes
              return_content: yes
              body_format: json
              status_code: 200
            register: openebs_job
            until: "openebs_job.json.state == 'Success'"
            delay: 10
            retries: 30

          when: openebses_active.json.data == []

        ## Deploying application mongodb
        - include_tasks: /utils/mongo-app.yml

        - name: Fetch OpenEBS control plane pods state
          shell: kubectl get pods -n openebs  | grep {{ item }} | awk '{print $3}' | awk -F':' '{print $1}' | tail -n 1
          register: app_status
          until: app_status.stdout == 'Running'
          with_items:
            - '{{ openebs_components }}'
          retries: 30
          delay: 10

        - name: Fetch OpenEBS control plane pods ready status
          shell: kubectl get pods -n openebs | grep {{ item }} | awk '{print $2}' | awk -F'/' '{print $1}' && kubectl get pods -n openebs | grep {{ item }} | awk '{print $2}' | awk -F'/' '{print $2}'
          register: ready_status
          with_items:
            - '{{ openebs_components }}'
          until: '{{ ready_status.stdout_lines | unique | length == 1 }}'
          retries: 30
          delay: 10

        ## Get application volume health status for replica-1
        - name: Get application volume health status for replica-1
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayaapplications'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: volume_health
          until: "volume_health.json.data[0].data.pods[0].volumes[0].replica[0].state=='Running'"
          retries: 30
          delay: 10
        
        ## Get application volume health status for replica-2
        - name: Get application volume health status for replica-2
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayaapplications'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: volume_health
          until: "volume_health.json.data[0].data.pods[0].volumes[0].replica[1].state=='Running'"
          retries: 30
          delay: 10

        ## Get application volume health status for replica-3
        - name: Get application volume health status for replica-3
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayaapplications'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: volume_health
          until: "volume_health.json.data[0].data.pods[0].volumes[0].replica[2].state=='Running'"
          retries: 30
          delay: 10

        ## Get active openebses
        - name: Get active openebses
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses?state=active&clusterId={{ cluster_id}}"
            method: GET
            url_username: "{{ username.stdout }}" 
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            status_code: 200
          register: openebses_active
          failed_when: openebses_active.json.data == []

        ## Getting the openebses id
        - name: Getting the openebses id
          set_fact:
            openebs_id: "{{ openebses_active.json.data[0].id }}"
        
        ## Upgrading openebs control plane components
        - name: Upgrading openebs control plane components
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses/{{ openebs_id }}/?action=upgradecontrolplane"
            method: POST
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body: '{"upgradeVersion":"{{ openebs_target_version }}"}'
            status_code: 200
          register: openebs_upgrade
        
        ## Fetching Job Id to of openebsjob
        - name: Fetching Job Id to of openebs_upgrade_job
          set_fact:
            openebs_job_id: "{{ openebs_upgrade.json.id }}"

        ## Fetch openebsjob details
        - name: Fetch openebsjob details
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id}}/openebsjobs/{{ openebs_job_id }}"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            status_code: 200
          register: openebs_job
          until: "openebs_job.json.state == 'Success'"
          delay: 10
          retries: 10

        ## Getting openebs template to check upgrade status
        - name: Getting openebs template to check upgrade status
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebstemplates"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            status_code: 200
          register: template
          failed_when: template.json.data[0].version != openebs_target_version
    
        ## Setting flag as Pass
        - set_fact:
            flag: "Pass"
        
      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'
        